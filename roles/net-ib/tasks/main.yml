---

# This file is distributed under the Apache License (the
# "License"); you may not use this file except in compliance
# with the License.  See the LICENSE file distributed with 
# this work for additional information regarding copyright
# ownership. 
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# This file is derived from recipe.sh in OpenHPC distribution 
# and ported by Linaro Ltd. and Fujitsu Ltd.

#
#roles/net-ib/tasks/main.yml
#

# ------------------------------------------------------------
# Add InfiniBand support services on master node (Section 3.5)
# ------------------------------------------------------------

- block:
#yum -y groupinstall "InfiniBand Support"
  - name: Install InfiniBand support on master
    yum: name={{ item }} state=latest
    with_items:
      - "@InfiniBand Support"
    when:
      - inventory_hostname in groups[nt_sms]

#systmctl start rdma
  - name: Start rdma services on master
    service: name=rdma state=started enabled=yes
    when:
      - inventory_hostname in groups[nt_sms]

  when:
    - enable_linux_ib == true

- block:
    - name: download mellanox iso image faile
      get_url: url={{ mellanox_iso_url }} dest=/tmp
      when:
        - inventory_hostname in groups[nt_sms]

    - name: mount mellanox iso image on master
      mount:
        name: "/mnt/mlnx" 
        src: /tmp/{{ mellanox_iso_file }}
        fstype: iso9660
        opts: ro,loop
        state: mounted
      when:
        - inventory_hostname in groups[nt_sms]

#yum install required packages for installing MLNX_OFED_LINUX on master
    - name: Install  on master
      yum: name={{ item }} state=latest
      with_items:
        - pciutils
        - lsof
        - gtk2
        - atk
        - gcc-gfortran
        - tk
      when:
        - inventory_hostname in groups[nt_sms]

#./mnt/mlnxofedinstall --all  --force
    - name: run a script "/mnt/mlnxofedinstall --force" on master
      shell: /mnt/mlnx/mlnxofedinstall --force
      register: result
      failed_when: result.rc not in [0]
      when:
        - inventory_hostname in groups[nt_sms]
 
# sleep 2 && shutdown -r now   
    - name: restart sms machine
      shell: sleep 2 && shutdown -r now
      async: 1
      poll: 0
      become: true
      ignore_errors: true
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_reboot == true

    - name: wait for reboot
      wait_for_connection:
        delay: 30
        timeout: 300
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_reboot == true        
  when:
    - enable_mellanox_ib == true

#if [[ ${enable_ipoib} -eq 1 ]];then
- block:

#     # Enable ib0
#     cp /opt/ohpc/pub/examples/network/centos/ifcfg-ib0 /etc/sysconfig/network-scripts

    - name: Copy ifcfg-ib0 on master
      command: "cp /opt/ohpc/pub/examples/network/centos/ifcfg-ib0 /etc/sysconfig/network-scripts/ifcfg-{{ sms_ipoib_internal }}"
      register: result
      failed_when: result.rc not in [0]

#     perl -pi -e "s/master_ipoib/${sms_ipoib}/" /etc/sysconfig/network-scripts/ifcfg-ib0
    - name: Define local IPoIB address on master
      replace: dest="/etc/sysconfig/network-scripts/ifcfg-{{ sms_ipoib_internal }}" regexp='^DEVICE=(\S+)' replace="DEVICE={{ sms_ipoib_internal }}" 

#     perl -pi -e "s/master_ipoib/${sms_ipoib}/" /etc/sysconfig/network-scripts/ifcfg-ib0
    - name: Define local IPoIB address on master
      replace: dest="/etc/sysconfig/network-scripts/ifcfg-{{ sms_ipoib_internal }}" regexp='master_ipoib' replace="{{ sms_ipoib }}" 

#     perl -pi -e "s/ipoib_netmask/${ipoib_netmask}/" /etc/sysconfig/network-scripts/ifcfg-ib0
    - name: Define local IPoIB netmask on master
      replace: dest="/etc/sysconfig/network-scripts/ifcfg-{{ sms_ipoib_internal }}" regexp='ipoib_netmask' replace="{{ ipoib_netmask }}" 

#     ifup ib0
    - name: Initiate ibX on master
      command: "ifup {{ sms_ipoib_internal }}"
      register: result
      failed_when: result.rc not in [0]

    - name: Get ib ifcfg template to give to the cnodes
      fetch:
        src: "/opt/ohpc/pub/examples/network/centos/ifcfg-ib0"
        dest: "{{ role_path }}/ifcfg-ib"
        flat: yes

  when:
    - inventory_hostname in groups[nt_sms]
    - enable_dhcpd_server == false      
    - enable_ipoib == true
    - enable_ifup == true
#fi

- block:
  #yum -y --installroot=$CHROOT groupinstall "InfiniBand Support"
  - name: Install InfiniBand support to computing node images on master
    yum: name={{ item }} installroot="{{ compute_chroot_loc }}" state=latest
    with_items:
      - "@InfiniBand Support"
    when:
      - inventory_hostname in groups[nt_sms]
      - enable_warewulf == true

  - name: Install InfiniBand support on computing nodes
    yum: name={{ item }} state=latest
    with_items:
      - "@InfiniBand Support"
    when:
      - inventory_hostname in groups[nt_cnodes]
      - enable_warewulf == false

#chroot $CHROOT systemctl enable rdma
  - name: enable rdma for computing node images on master
    command: "chroot {{ compute_chroot_loc }} systemctl enable rdma"
    register: result
    failed_when: result.rc not in [0]
    when:
      - inventory_hostname in groups[nt_sms]
      - enable_warewulf == true

  - name: enable rdma on a computing node
    service: name=rdma enabled=yes state=started
    when:
      - inventory_hostname in groups[nt_cnodes]
      - enable_warewulf == false

  when:
    - enable_linux_ib == true  

- block:
    - name: mount mellanox iso image to computing node images on master
      mount:
        name: "{{ compute_chroot_loc }}/mnt/mlnx"
        src: /tmp/{{ mellanox_iso_file }}
        fstype: iso9660
        opts: ro,loop
        state: mounted
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_warewulf == true

    - name: run a script /mnt/mlnxofedinstall --force to computing node images on master
      shell: "{{ compute_chroot_loc }}/mnt/mlnx/mlnxofedinstall --force"
      register: result
      failed_when: result.rc not in [0]
      when:
        - inventory_hostname in groups[nt_sms]
        - enable_warewulf == true

    - name: download mellanox iso image faile on computing node
      get_url: url={{ mellanox_iso_url }} dest=/tmp
      when:
        - inventory_hostname in groups[nt_cnodes]
        - enable_warewulf == false

    - name: mount mellanox iso image on computing node
      mount:
        name: "/mnt/mlnx"
        src: /tmp/{{ mellanox_iso_file }}
        fstype: iso9660
        opts: ro,loop
        state: mounted
      when:
        - inventory_hostname in groups[nt_cnodes]
        - enable_warewulf == false        

#yum install pciutils lsof gtk2 atk gcc-gfortran tk
    - name: Install required packages for installing MLNX_OFED_LINUX on computing node
      yum: name={{ item }} state=latest
      with_items:
        - pciutils
        - lsof
        - gtk2
        - atk
        - gcc-gfortran
        - tk
      when:
        - inventory_hostname in groups[nt_cnodes]
        - enable_warewulf == false

    - name: run a script "/mnt/mlnxofedinstall --force" on computing node
      shell: /mnt/mlnx/mlnxofedinstall --force
      register: result
      failed_when: result.rc not in [0]
      when:
        - inventory_hostname in groups[nt_cnodes]
        - enable_warewulf == false

# sleep 2 && shutdown -r now
    - name: restart computing node machine
      shell: sleep 2 && shutdown -r now
      async: 1
      poll: 0
      become: true
      ignore_errors: true
      when:
        - inventory_hostname in groups[nt_cnodes]
        - enable_reboot == true

    - name: wait for reboot
      wait_for_connection:
        delay: 30
        timeout: 300
      when:
        - inventory_hostname in groups[nt_cnodes]
        - enable_reboot == true

  when:
    - enable_mellanox_ib == true  
- block:

  - name: Create an ifcfg-ib file on compute nodes
    copy:
      src: "{{ role_path }}/ifcfg-ib"
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}" 

#     perl -pi -e "s/master_ipoib/${sms_ipoib}/" /etc/sysconfig/network-scripts/ifcfg-ib0
  - name: Define local IPoIB address on cnode
    replace: dest="/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}" regexp='^DEVICE=(\S+)' replace="DEVICE={{ cnodes_ipoib_internal }}" 
    with_items: "{{ compute_ipoib }}"
    when:
      - inventory_hostname == item.c_hostname 

#     perl -pi -e "s/master_ipoib/${sms_ipoib}/" /etc/sysconfig/network-scripts/ifcfg-ib0
  - name: Define local IPoIB address on cnode
    replace: dest="/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}" regexp="master_ipoib" replace="{{ item.c_ipoib }}" 
    with_items: "{{ compute_ipoib }}"
    when:
      - inventory_hostname == item.c_hostname

  - name: Define local IPoIB netmask on master
    replace: dest="/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}" regexp='ipoib_netmask' replace="{{ ipoib_netmask }}" 

  - name: Define local IPoIB address on cnode
    replace: dest="/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}" regexp="^BOOTPROTO=static" replace="BOOTPROTO=none" 

  - name: Make {{ cnodes_ipoib_internal }} up on cnodes 
    command: "ifup {{ cnodes_ipoib_internal }}" 
    register: result
    failed_when: result.rc not in [0]
    with_items: "{{ compute_ipoib }}"
    when:
      - inventory_hostname == item.c_hostname

  when:
    - inventory_hostname in groups[nt_cnodes]
    - enable_dhcpd_server == false
    - enable_ipoib == true
    - enable_ifup == true
    - enable_warewulf == false

- block:

  - name: Create an ifcfg-ib file on cnodes
    copy:
      src: "{{ role_path }}/ifcfg-ib"
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ cnodes_ipoib_internal }}" 

  - name: Make {{ cnodes_ipoib_internal }} up on master
    command: "ifup {{ cnodes_ipoib_internal }}" 
    register: result
    failed_when: result.rc not in [0]

  when:
    - inventory_hostname in groups[ nt_cnodes ]
    - enable_dhcpd_server == true 
    - enable_ipoib == true
    - enable_ifup == true
    - enable_warewulf == false

# Optionally enable opensm subnet manager
#if [[ ${enable_opensm} -eq 1 ]];then
- block:

#     yum -y install opensm
  - name: Install opensm on master
    yum: name={{ item }} state=latest
    with_items:
      - opensm

#     systemctl enable opensm
  - name: Enable opensm on master
    service: name=opensm enabled=yes

#     systemctl start opensm
  - name: Start opensm on master
    service: name=opensm state=started

  when: 
    - enable_opensm == true
    - inventory_hostname in groups[nt_sms]
#fi



#perl -pi -e 's/# End of file/\* soft memlock unlimited\n$&/s' /etc/security/limits.conf
#perl -pi -e 's/# End of file/\* hard memlock unlimited\n$&/s' /etc/security/limits.conf
#perl -pi -e 's/# End of file/\* soft memlock unlimited\n$&/s' $CHROOT/etc/security/limits.conf
#perl -pi -e 's/# End of file/\* hard memlock unlimited\n$&/s' $CHROOT/etc/security/limits.conf

- block:
  - name: remove current soft memlock /etc/security/limits.conf for computing node images on master
    replace:
      path: "{{ compute_chroot_loc }}/etc/security/limits.conf"
      regexp: '^\* soft memlock unlimited\n'

  - name: Add soft mem lock to /etc/security/limits.conf for computing node images on master
    lineinfile:
      path:  "{{ compute_chroot_loc }}/etc/security/limits.conf"
      state: present
      backrefs: yes
      regexp: '^(# End of file\s*\n)'
      line: '* soft memlock unlimited\n\1'

  - name: remove current hard memlock for computing node images on master
    replace:
      path: "{{ compute_chroot_loc }}/etc/security/limits.conf"
      regexp: '^\* hard memlock unlimited\n'
      
  - name: Add hard mem lock for computing node images on master
    lineinfile:
      path: "{{ compute_chroot_loc }}/etc/security/limits.conf"
      state: present
      backrefs: yes
      regexp: '^(# End of file\s*\n)'
      line: '* hard memlock unlimited\n\1'

  when:
    - inventory_hostname in groups[nt_sms] 
    - enable_warewulf == true

- block:
  - name: remove current soft memlock /etc/security/limits.conf on master and computing nodes
    replace:
      path: "/etc/security/limits.conf"
      regexp: '^\* soft memlock unlimited\n'

  - name: Add soft mem lock to /etc/security/limits.conf on master and computing nodes
    lineinfile:
      path:  "/etc/security/limits.conf"
      state: present
      backrefs: yes
      regexp: '^(# End of file\s*\n)'
      line: '* soft memlock unlimited\n\1'

  - name: remove current hard memlock on master and computing nodes
    replace:
      path: "/etc/security/limits.conf"
      regexp: '^\* hard memlock unlimited\n'

  - name: Add hard mem lock on master and computing nodes
    lineinfile:
      path: "/etc/security/limits.conf"
      state: present
      backrefs: yes
      regexp: '^(# End of file\s*\n)'
      line: '* hard memlock unlimited\n\1'
  when:
    ( ( inventory_hostname in groups[nt_sms] ) or
    ( inventory_hostname in groups[nt_devnodes] ) or
    ( inventory_hostname in groups[nt_cnodes] ) ) and ( enable_warewulf == false )

# Optionally, define IPoIB network settings (required if planning to mount Lustre over IB)
# if [[ ${enable_ipoib} -eq 1 ]];then
#      for ((i=0; i<$num_computes; i++)) ; do
#         wwsh -y node set ${c_name[$i]} -D ib0 --ipaddr=${c_ipoib[$i]} --netmask=${ipoib_netmask}
#      done
- block:

     - name: Define IPoIB network settings on master
       shell: wwsh -d -v -y node set "{{ item.c_name }}" -D ib0 --ipaddr="{{ item.c_ipoib }}" --netmask="{{ ipoib_netmask }}"
       register: result
       failed_when: result.rc not in [0]
       with_items: "{{ compute_ipoib }}"
       when:
         - inventory_hostname in groups[nt_sms]
         - enable_warewulf == true

#      wwsh -y provision set "${compute_regex}" --fileadd=ifcfg-ib0.ww
     - name: Set IPoIB network settings to warewulf data store on master
       shell: wwsh -d -v -y provision set "{{ compute_regex }}" --fileadd=ifcfg-ib0.ww
       register: result
       failed_when: result.rc not in [0]
       when:
         - inventory_hostname in groups[nt_sms]
         - enable_warewulf == true

# Todo: IB if for each computing node without warewulf

  when:
    - enable_ipoib == true
# fi
