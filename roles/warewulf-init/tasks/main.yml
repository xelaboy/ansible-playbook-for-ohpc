---

# This file is distributed under the Apache License (the
# "License"); you may not use this file except in compliance
# with the License.  See the LICENSE file distributed with
# this work for additional information regarding copyright
# ownership.
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# This file is derived from recipe.sh in OpenHPC distribution
# and ported by Linaro Ltd. and Fujitsu Ltd.

#
#roles/warewulf/tasks/main.yml
#

#yum -y groupinstall ohpc-warewulf
- name: Install ohpc-warewulf on master
  yum: name={{ item }} state=latest
  with_items:
    - ohpc-warewulf
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == true

# -----------------------------------------------------------
# Complete basic Warewulf setup for master node (Section 3.5)
# -----------------------------------------------------------
- block:

#perl -pi -e "s/device = eth1/device = ${sms_eth_internal}/" /etc/warewulf/provision.conf
  - name: Configure Warewulf provisioning to use desired internal interface (on master)
    replace: dest=/etc/warewulf/provision.conf regexp='device\s+=\s+eth1' replace="device = {{ sms_eth_internal }}" backup=yes

#perl -pi -e "s/^\s+disable\s+= yes/ disable = no/" /etc/xinetd.d/tftp
  - name: Enable tftp service for computing node image distribution (on master)
    replace: dest=/etc/xinetd.d/tftp regexp='^\s+disable\s+= yes' replace="disable = no" backup=yes

#ifconfig ${sms_eth_internal} ${sms_ip} netmask ${internal_netmask} up
  - name: Enable internal interface for provisioning (on master)
    command: "ifconfig {{ sms_eth_internal }} {{ sms_ip }} netmask {{ internal_netmask }} up"
    register: result
    failed_when: result.rc not in [0]
    when:
      - enable_ifup == false
      - enable_dhcpd_server == false

# Restart/enable relevant services to support provisioning
#systemctl restart xinetd
  - name: Restart xinetd on master
    service: name=xinetd state=restarted

#systemctl enable mariadb.service
  - name: Enable mariadb.service on master
    service: name=mariadb.service enabled=yes

#systemctl restart mariadb
  - name: Restart mariadb on master
    service: name=mariadb state=restarted

#systemctl enable httpd.service
  - name: Enable httpd.service on master
    service: name=httpd.service enabled=yes

#systemctl restart httpd
  - name: Restart httpd on master
    service: name=httpd state=restarted

  when:
    - inventory_hostname in groups[ nt_sms ]
    - enable_warewulf == true
# -------------------------------------------------
# Create compute image for Warewulf (Section 3.6.1)
# -------------------------------------------------

# Override default OS repository (optional) - set YUM_MIRROR variable to desired repo location (on master)
#TODO:
#if [ ! -z ${BOS_MIRROR+x} ]; then
#     export YUM_MIRROR=${BOS_MIRROR}
#fi

- block:

  - name: Touch ~/.bashrc on master
    file: path="{{ ansible_home }}/.bashrc" state=touch
    when:
      - enable_warewulf == true

  - name: "Add environment variable export CHROOT={{compute_chroot_loc}} on master"
    lineinfile:
      path: "{{ ansible_home }}/.bashrc"
      state: present
      backrefs: no
      regexp: '^export CHROOT="{{ compute_chroot_loc }}$'
      line: 'export CHROOT="{{ compute_chroot_loc }}"'
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == true

#wwmkchroot centos-7 $CHROOT
- name: Build initial chroot image on master
  command: wwmkchroot centos-7 "{{ compute_chroot_loc }}"
  register: result
  failed_when: result.rc not in [0, 1]
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == true

# ----------------------------------------------
# Customize system configuration (Section 3.7.3)
# ----------------------------------------------
#wwinit database
- name: initialize database on master
  command: wwinit database
  register: result
  failed_when: result.rc not in [0]
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == true

# Clusterwide SSH Key configuration with Warewulf and without
#wwinit ssh_keys
- name: Generate cluster ssh keys on master
  command: wwinit ssh_keys
  register: result
  ignore_errors: true
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == true

- name: Generate cluster ssh keys on master
  user:
    name: root
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_type: rsa
    ssh_key_file: .ssh/cluster
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == false

#cat ~/.ssh/cluster.pub >> $CHROOT/root/.ssh/authorized_keys
- name: Create ~/.ssh in the computing node image
  file: path="{{ compute_chroot_loc }}/root/.ssh" state=directory mode=0700
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == true

# stateful
- name: Create ~/.ssh  on each computing node
  file: path="/root/.ssh" state=directory mode=0700
  when:
    - inventory_hostname in groups[nt_cnodes]
    - enable_warewulf == false

- name: Copy /root/.ssh/cluster.pub to /tmp to copy the key on master
  command: cp "/root/.ssh/cluster.pub" "{{ compute_chroot_loc }}/root/cluster.pub"
  register: result
  failed_when: result.rc not in [0]
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == true

- name: Fetch cluster.pub in sms to a ansible local cluster.pub
  fetch:
    src: /root/.ssh/cluster.pub
    dest: "{{ role_path }}/cluster.pub"
    flat: yes
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == false

# stateless
- name: Copy ansible local cluster.pub to /root/.ssh/cluster.pub on master
  copy:
    src: "{{ role_path }}/cluster.pub"
    dest: /root/.ssh/cluster.pub
  when:
    - inventory_hostname in groups[nt_cnodes]
    - enable_warewulf == false

- name: Copy /root/.ssh/cluster.pub to "{{ compute_chroot_loc }}/root/cluster.pub" to copy the key on master
  command: cp "/root/.ssh/cluster.pub" "{{ compute_chroot_loc }}/root/cluster.pub"
  register: result
  failed_when: result.rc not in [0]
  when:
    - inventory_hostname in groups[nt_sms]
    - enable_warewulf == true

- name: Copy cluster.pub to role path to lookup the key file on master
  command: cp "/root/.ssh/cluster.pub" "{{ role_path }}/cluster.pub"
  register: result
  failed_when: result.rc not in [0]
  when:
     - inventory_hostname in groups[nt_sms]
     - enable_warewulf == true

# stateful
- name: Add cluster.pub to authorized_keys on a computing node
  lineinfile:
    path: "/root/.ssh/authorized_keys"
    state: present
    backrefs: no
    create: yes
    line: "{{ lookup('file', '{{ role_path }}/cluster.pub') }}"
  when:
    - inventory_hostname in groups[nt_cnodes]
    - enable_warewulf == false
